GA.data$dayOfWeek[GA.data$dayOfWeek == "5"] <- "Friday"
GA.data$dayOfWeek[GA.data$dayOfWeek == "6"] <- "Saturday"
# Use a sensible order.
GA.data$dayOfWeek <- factor(GA.data$dayOfWeek, levels = c( "Monday",
"Tuesday",
"Wednesday",
"Thursday",
"Friday",
"Saturday",
"Sunday"))
GA.data[order(GA.data$dayOfWeek),]
# DRAW IT ---------------------------------------------------------------------
library(ggplot2)
GA.data.pageviews <- ggplot(GA.data, aes(dayOfWeek, hour, fill = pageviews)) +
geom_tile(colour = "white") +
scale_fill_gradient(high="steelblue",low="white") +
labs(title = "Pageviews by day and hour") +
xlab("Weekday") +
ylab("")
GA.data.pageviews
GA.data$year <- as.numeric(as.POSIXlt(GA.data$date)$year+1900)
GA.data$month <- as.numeric(as.POSIXlt(GA.data$date)$mon+1)
GA.data$month<- factor(GA.data$month,levels=as.character(1:12),
labels=c("Jan","Feb","Mar","Apr","May","Jun",
"Jul","Aug","Sep","Oct","Nov","Dec"),
ordered=TRUE)
GA.data$yearmonth <- as.yearmon(GA.data$date)
GA.data$yearmonth <- factor(GA.data$yearmonth)
GA.data$week <- as.numeric(format(as.Date(GA.data$date),"%W"))
GA.data <- ddply(GA.data,.(yearmonth),transform,monthweek=1+week-min(week))
# Plot for pageviews
P_pageviews <- ggplot(GA.data, aes(monthweek, dayOfWeek, fill = pageviews)) +
geom_tile(colour = "white") +
facet_grid(year~month) +
scale_fill_gradient(high="steelblue",low="white") +
labs(title = "Time-Series Calendar Heatmap") +
xlab("Week of Month") +
ylab("")
P_pageviews
library(lubridate)
GA.data$year <- as.numeric(as.POSIXlt(GA.data$date)$year+1900)
GA.data$month <- as.numeric(as.POSIXlt(GA.data$date)$mon+1)
GA.data$month<- factor(GA.data$month,levels=as.character(1:12),
labels=c("Jan","Feb","Mar","Apr","May","Jun",
"Jul","Aug","Sep","Oct","Nov","Dec"),
ordered=TRUE)
GA.data$yearmonth <- as.yearmon(GA.data$date)
GA.data$yearmonth <- factor(GA.data$yearmonth)
GA.data$week <- as.numeric(format(as.Date(GA.data$date),"%W"))
GA.data <- ddply(GA.data,.(yearmonth),transform,monthweek=1+week-min(week))
# Plot for pageviews
P_pageviews <- ggplot(GA.data, aes(monthweek, dayOfWeek, fill = pageviews)) +
geom_tile(colour = "white") +
facet_grid(year~month) +
scale_fill_gradient(high="steelblue",low="white") +
labs(title = "Time-Series Calendar Heatmap") +
xlab("Week of Month") +
ylab("")
P_pageviews
library(lubridate)
library(zoo)
GA.data$year <- as.numeric(as.POSIXlt(GA.data$date)$year+1900)
GA.data$month <- as.numeric(as.POSIXlt(GA.data$date)$mon+1)
GA.data$month<- factor(GA.data$month,levels=as.character(1:12),
labels=c("Jan","Feb","Mar","Apr","May","Jun",
"Jul","Aug","Sep","Oct","Nov","Dec"),
ordered=TRUE)
GA.data$yearmonth <- as.yearmon(GA.data$date)
GA.data$yearmonth <- factor(GA.data$yearmonth)
GA.data$week <- as.numeric(format(as.Date(GA.data$date),"%W"))
GA.data <- ddply(GA.data,.(yearmonth),transform,monthweek=1+week-min(week))
# Plot for pageviews
P_pageviews <- ggplot(GA.data, aes(monthweek, dayOfWeek, fill = pageviews)) +
geom_tile(colour = "white") +
facet_grid(year~month) +
scale_fill_gradient(high="steelblue",low="white") +
labs(title = "Time-Series Calendar Heatmap") +
xlab("Week of Month") +
ylab("")
P_pageviews
library(lubridate)
library(zoo)
library(plyr)
GA.data$year <- as.numeric(as.POSIXlt(GA.data$date)$year+1900)
GA.data$month <- as.numeric(as.POSIXlt(GA.data$date)$mon+1)
GA.data$month<- factor(GA.data$month,levels=as.character(1:12),
labels=c("Jan","Feb","Mar","Apr","May","Jun",
"Jul","Aug","Sep","Oct","Nov","Dec"),
ordered=TRUE)
GA.data$yearmonth <- as.yearmon(GA.data$date)
GA.data$yearmonth <- factor(GA.data$yearmonth)
GA.data$week <- as.numeric(format(as.Date(GA.data$date),"%W"))
GA.data <- ddply(GA.data,.(yearmonth),transform,monthweek=1+week-min(week))
# Plot for pageviews
P_pageviews <- ggplot(GA.data, aes(monthweek, dayOfWeek, fill = pageviews)) +
geom_tile(colour = "white") +
facet_grid(year~month) +
scale_fill_gradient(high="steelblue",low="white") +
labs(title = "Time-Series Calendar Heatmap") +
xlab("Week of Month") +
ylab("")
P_pageviews
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
P_pageviews <- ggplot(GA.data, aes(monthweek, dayOfWeek, fill = pageviews)) +
geom_tile(colour = "white") +
facet_grid(year~month) +
scale_fill_gradient(colours=rainbow(2)) \n'') +
labs(title = "Time-Series Calendar Heatmap") +
xlab("Week of Month") +
ylab("")
P_pageviews
scale_fill_gradient(colours=rainbow(2)) \n) +
P_pageviews <- ggplot(GA.data, aes(monthweek, dayOfWeek, fill = pageviews)) +
geom_tile(colour = "white") +
facet_grid(year~month) +
scale_fill_gradient(colours=rainbow(2)) \n) +
labs(title = "Time-Series Calendar Heatmap") +
xlab("Week of Month") +
ylab("")
P_pageviews
P_pageviews <- ggplot(GA.data, aes(monthweek, dayOfWeek, fill = pageviews)) +
geom_tile(colour = "white") +
facet_grid(year~month) +
scale_fill_gradientn(colours=rainbow(2)) \n) +
labs(title = "Time-Series Calendar Heatmap") +
xlab("Week of Month") +
ylab("")
P_pageviews
P_pageviews <- ggplot(GA.data, aes(monthweek, dayOfWeek, fill = pageviews)) +
geom_tile(colour = "white") +
facet_grid(year~month) +
scale_fill_gradientn() +
labs(title = "Time-Series Calendar Heatmap") +
xlab("Week of Month") +
ylab("")
P_pageviews
P_pageviews <- ggplot(GA.data, aes(monthweek, dayOfWeek, fill = pageviews)) +
geom_tile() +
facet_grid(year~month) +
scale_fill_gradientn() +
labs(title = "Time-Series Calendar Heatmap") +
xlab("Week of Month") +
ylab("")
P_pageviews <- ggplot(GA.data, aes(monthweek, dayOfWeek, fill = pageviews)) +
#         geom_tile(colour = "white") +
facet_grid(year~month) +
#         scale_fill_gradient(high="steelblue",low="white") +
labs(title = "Time-Series Calendar Heatmap") +
xlab("Week of Month") +
ylab("")
P_pageviews
P_pageviews <- ggplot(GA.data, aes(monthweek, dayOfWeek, fill = pageviews)) +
geom_tile(colour = "white") +
facet_grid(year~month) +
scale_fill_gradient(high="steelblue",low="red") +
labs(title = "Time-Series Calendar Heatmap") +
xlab("Week of Month") +
ylab("")
P_pageviews
P_pageviews <- ggplot(GA.data, aes(monthweek, dayOfWeek, fill = pageviews)) +
geom_tile(colour = "white") +
facet_grid(year~month) +
scale_fill_gradient(high="steelblue",low="blue") +
labs(title = "Time-Series Calendar Heatmap") +
xlab("Week of Month") +
ylab("")
P_pageviews
P_pageviews <- ggplot(GA.data, aes(monthweek, dayOfWeek, fill = pageviews)) +
geom_tile(colour = "white") +
facet_grid(year~month) +
scale_fill_gradient(high="steelblue",low="white") +
labs(title = "Time-Series Calendar Heatmap") +
xlab("Week of Month") +
ylab("")
P_pageviews
if (!require("rga")) {
install.packages("rga")
require("rga")
}
library("rga")
library(rga) #Load the package after installation
rga.open(instance = "ga", where = "~/Documents/R/ga-api/ga.rga") #Open connection with Google API and save it in your computer. This prevents you from authenticating via web browser every time you use it.
# ids = "ga:XXXXX" #Select the one you are interested in and change XXXXX by the actual id
id <- as.character(profiles[1,1]) #id 2 corresponds to comerdeleon
library("rga")
library(rga) #Load the package after installation
rga.open(instance = "ga", where = "~/Documents/R/ga-api/ga.rga") #Open c
library("rga")
library(rga) #Load the package after installation
rga.open(instance = "ga", where = "~/Documents/R/ga-api/ga.rga") #Open connection with Google API and save it in your computer. This prevents you from authenticating via web browser every time you use it.
library("rga")
library(rga) #Load the package after installation
rga.open(instance = "ga", where = "~/Documents/R/ga-api/ga.rga") #Open connection with Google API and save it in your computer. This prevents you from authenticating via web browser every time you use it.
if (!require("rga")) {
install.packages("rga")
require("rga")
}
library("rga")
library(rga) #Load the package after installation
rga.open(instance = "ga", where = "~/Documents/R/ga-api/ga.rga") #Open connection with Google API and save it in your computer. This prevents you from authenticating via web browser every time you use it.
profiles <- ga$getProfiles() #If your Google Analytics handles multiple websites should appear here
# ids = "ga:XXXXX" #Select the one you are interested in and change XXXXX by the actual id
id <- as.character(profiles[1,1]) #id 2 corresponds to comerdeleon
if (!require("rga")) {
install.packages("rga")
require("rga")
}
library("rga")
library(rga) #Load the package after installation
rga.open(instance = "ga", where = "~/Documents/R/ga-api/ga.rga") #Open connection with Google API and save it in your computer. This prevents you from authenticating via web browser every time you use it.
profiles <- ga$getProfiles() #If your Google Analytics handles multiple websites should appear here
# ids = "ga:XXXXX" #Select the one you are interested in and change XXXXX by the actual id
id <- as.character(profiles[1,1]) #id 2 corresponds to comerdeleon
if (!require("rga")) {
install.packages("rga")
require("rga")
}
library("rga")
library(rga) #Load the package after installation
rga.open(instance = "ga", where = "~/Documents/R/ga-api/ga.rga") #Open connection with Google API and save it in your computer. This prevents you from authenticating via web browser every time you use it.
# ids = "ga:XXXXX" #Select the one you are interested in and change XXXXX by the actual id
id <- as.character(profiles[1,1]) #id 2 corresponds to comerdeleon
#Before getting the GA.data, we need to define some GA.data features we are interested in
startdate <- "2014-04-01" #Date of creation of the blog
enddate <- "2014-10-26"
ga_metrics <- "ga:pageviews,ga:uniquePageviews,ga:entrances,ga:exits,ga:visits,ga:bounces,ga:timeOnPage" # Report number of page views and sessions
#Set dimensions you want to split metrics
ga_dimensions <- "ga:date,ga:dayOfWeek,ga:month, ga:week,ga:hour"
#Finally get the GA.data
GA.data <- ga$getData(id,
metrics = ga_metrics,
dimensions = ga_dimensions,
start.date = startdate,
end.date = enddate,
max=10000
)
if (!require("rga")) {
install.packages("rga")
require("rga")
}
library("rga")
library(rga) #Load the package after installation
rga.open(instance = "ga", where = "~/Documents/R/ga-api/ga.rga") #Open connection with Google API and save it in your computer. This prevents you from authenticating via web browser every time you use it.
library("rga")
library(rga) #Load the package after installation
rga.open(instance = "ga", where = "~/Documents/R/ga-api/ga.rga")
if (!require("rga")) {
install.packages("rga")
require("rga")
}
library("rga")
library(rga) #Load the package after installation
rga.open(instance = "ga", where = "~/Documents/R/ga-api/ga.rga")
library("rga")
library(rga) #Load the package after installation
rga.open(instance = "ga", where = "~/Documents/R/ga-api/ga.rga") #Open connection with Google API and save it in your computer. This prevents you from authenticating via web browser every time you use it.
library("rga")
library(rga) #Load the package after installation
rga.open(instance = "ga", where = "~/Documents/R/ga-api/ga.rga") #Open connection with Google API and save it in your computer. This prevents you from authenticating via web browser every time you use it.
profiles <- ga$getProfiles() #If your Google Analytics handles multiple websites should appear here
if (!require("rga")) {
install.packages("rga")
require("rga")
}
library("rga")
library(rga) #Load the package after installation
rga.open(instance = "ga", where = "~/Documents/R/ga-api/ga.rga") #Open connection with Google API and save it in your computer. This prevents you from authenticating via web browser every time you use it.
profiles <- ga$getProfiles() #If your Google Analytics handles multiple websites should appear here
id <- as.character(profiles[1,1]) #id 2 corresponds to comerdeleon
id <- as.character(profiles[2,1]) #id 2 corresponds to comerdeleon
View(profiles)
#Before getting the GA.data, we need to define some GA.data features we are interested in
startdate <- "2014-08-01" #Date of creation of the blog
enddate <- "2014-10-26"
ga_metrics <- "ga:pageviews,ga:uniquePageviews,ga:entrances,ga:exits,ga:visits,ga:bounces,ga:timeOnPage" # Report number of page views and sessions
#Set dimensions you want to split metrics
ga_dimensions <- "ga:date,ga:dayOfWeek,ga:month, ga:week,ga:hour"
#Finally get the GA.data
GA.data <- ga$getData(id,
metrics = ga_metrics,
dimensions = ga_dimensions,
start.date = startdate,
end.date = enddate,
max=10000
)
View(GA.data)
GA.data$dayOfWeek <- as.character(GA.data$dayOfWeek)
GA.data$dayOfWeek[GA.data$dayOfWeek == "0"] <- "Sunday"
GA.data$dayOfWeek[GA.data$dayOfWeek == "1"] <- "Monday"
GA.data$dayOfWeek[GA.data$dayOfWeek == "2"] <- "Tuesday"
GA.data$dayOfWeek[GA.data$dayOfWeek == "3"] <- "Wednesday"
GA.data$dayOfWeek[GA.data$dayOfWeek == "4"] <- "Thursday"
GA.data$dayOfWeek[GA.data$dayOfWeek == "5"] <- "Friday"
GA.data$dayOfWeek[GA.data$dayOfWeek == "6"] <- "Saturday"
# Use a sensible order.
GA.data$dayOfWeek <- factor(GA.data$dayOfWeek, levels = c( "Monday",
"Tuesday",
"Wednesday",
"Thursday",
"Friday",
"Saturday",
"Sunday"))
GA.data[order(GA.data$dayOfWeek),]
# DRAW IT ---------------------------------------------------------------------
library(ggplot2)
GA.data.pageviews <- ggplot(GA.data, aes(dayOfWeek, hour, fill = pageviews)) +
geom_tile(colour = "white") +
scale_fill_gradient(high="steelblue",low="white") +
labs(title = "Pageviews by day and hour") +
xlab("Weekday") +
ylab("")
GA.data.pageviews
library(lubridate)
library(zoo)
library(plyr)
GA.data$year <- as.numeric(as.POSIXlt(GA.data$date)$year+1900)
GA.data$month <- as.numeric(as.POSIXlt(GA.data$date)$mon+1)
GA.data$month<- factor(GA.data$month,levels=as.character(1:12),
labels=c("Jan","Feb","Mar","Apr","May","Jun",
"Jul","Aug","Sep","Oct","Nov","Dec"),
ordered=TRUE)
GA.data$yearmonth <- as.yearmon(GA.data$date)
GA.data$yearmonth <- factor(GA.data$yearmonth)
GA.data$week <- as.numeric(format(as.Date(GA.data$date),"%W"))
GA.data <- ddply(GA.data,.(yearmonth),transform,monthweek=1+week-min(week))
# Plot for pageviews
Monthweekday.pageviews <- ggplot(GA.data, aes(monthweek, dayOfWeek, fill = pageviews)) +
geom_tile(colour = "white") +
facet_grid(year~month) +
scale_fill_gradient(high="steelblue",low="white") +
labs(title = "Time-Series Calendar Heatmap") +
xlab("Week of Month") +
ylab("")
Monthweekday.pageviews
source('~/.active-rstudio-document', echo=TRUE)
Monthwday.pageviews <- ggplot(GA.data, aes(monthweek, dayOfWeek, fill = pageviews)) +
geom_tile(colour = "white") +
facet_grid(year~month) +
scale_fill_gradient(high="steelblue",low="white") +
labs(title = "Time-Series Calendar Heatmap") +
xlab("Week of Month") +
ylab("")
Monthwday.pageviews
library(lubridate)
library(zoo)
library(plyr)
GA.data$year <- as.numeric(as.POSIXlt(GA.data$date)$year+1900)
GA.data$month <- as.numeric(as.POSIXlt(GA.data$date)$mon+1)
GA.data$month<- factor(GA.data$month,levels=as.character(1:12),
labels=c("Jan","Feb","Mar","Apr","May","Jun",
"Jul","Aug","Sep","Oct","Nov","Dec"),
ordered=TRUE)
GA.data$yearmonth <- as.yearmon(GA.data$date)
GA.data$yearmonth <- factor(GA.data$yearmonth)
GA.data$week <- as.numeric(format(as.Date(GA.data$date),"%W"))
GA.data <- ddply(GA.data,.(yearmonth),transform,monthweek=1+week-min(week))
# Plot for pageviews
Monthwday.pageviews <- ggplot(GA.data, aes(monthweek, dayOfWeek, fill = pageviews)) +
geom_tile(colour = "white") +
facet_grid(year~month) +
scale_fill_gradient(high="steelblue",low="white") +
labs(title = "Time-Series Calendar Heatmap") +
xlab("Week of Month") +
ylab("")
Monthwday.pageviews
source('~/.active-rstudio-document', echo=TRUE)
library(ggplot2)
Hourly.pageviews <- ggplot(GA.data, aes(dayOfWeek, hour, fill = pageviews)) +
geom_tile(colour = "white") +
scale_fill_gradient(high="steelblue",low="white") +
labs(title = "Pageviews by day and hour") +
xlab("Weekday") +
ylab("Hour")+
plot.margin = unit(c(1,1,1,1), "cm")
Hourly.pageviews
library(ggplot2)
Hourly.pageviews <- ggplot(GA.data, aes(dayOfWeek, hour, fill = pageviews)) +
geom_tile(colour = "white") +
scale_fill_gradient(high="steelblue",low="white") +
labs(title = "Pageviews by day and hour") +
xlab("Weekday") +
ylab("Hour")+
plot.margin = c(1,1,1,1)
Hourly.pageviews
Hourly.pageviews <- ggplot(GA.data, aes(dayOfWeek, hour, fill = pageviews))
Hourly.pageviews + geom_tile(colour = "white") +
scale_fill_gradient(high="steelblue",low="white") +
labs(title = "Pageviews by day and hour") +
xlab("Weekday") +
ylab("Hour")+
theme(plot.margin=unit(c(1,1,1,1),"cm"))
Hourly.pageviews <- ggplot(GA.data, aes(dayOfWeek, hour, fill = pageviews))
Hourly.pageviews + geom_tile(colour = "white") +
scale_fill_gradient(high="steelblue",low="white") +
labs(title = "Pageviews by day and hour") +
xlab("Weekday") +
ylab("Hour")+
theme(plot.margin=unit(c(1,1,1,1),units="cm"))
library(ggplot2)
Hourly.pageviews <- ggplot(GA.data, aes(dayOfWeek, hour, fill = pageviews))
Hourly.pageviews + geom_tile(colour = "white") +
scale_fill_gradient(high="steelblue",low="white") +
labs(title = "Pageviews by day and hour") +
xlab("Weekday") +
ylab("Hour")+
theme(plot.margin=unit(c(1,1,1,1),units="cm"))
library(ggplot2)
Hourly.pageviews <- ggplot(GA.data, aes(dayOfWeek, hour, fill = pageviews))
Hourly.pageviews + geom_tile(colour = "white") +
scale_fill_gradient(high="steelblue",low="white") +
labs(title = "Pageviews by day and hour") +
xlab("Weekday") +
ylab("Hour")+
opts(plot.margin=unit(c(1,1,1,1),units="cm"))
theme(plot.margin=unit(c(1,1,1,1),units="cm"))
Hourly.pageviews <- ggplot(GA.data, aes(dayOfWeek, hour, fill = pageviews))
Hourly.pageviews + geom_tile(colour = "white") +
scale_fill_gradient(high="steelblue",low="white") +
labs(title = "Pageviews by day and hour") +
xlab("Weekday") +
ylab("Hour")+
theme(plot.margin=unit(c(1,1,1,1),"cm"))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
summary(is.na(dt))
count(is.na(dt))
?count
count(dt, is.na(dt$steps))
?count
missing <- length(which(is.na(dt)))
View(dt)
dt.nomissing <- dt
dt.nomissing <- ifelse(!is.na(dt.nomissing$steps), dt.nomissing$steps, dt.by_interval$steps_avg)
dt.nomissing <- dt
View(dt)
dt.nomissing$steps <- steps.nomissing
dt.nomissing <- dt
steps.nomissing <- ifelse(!is.na(dt.nomissing$steps), dt.nomissing$steps, dt.by_interval$steps_avg)
dt.nomissing$steps <- steps.nomissing
View(dt.nomissing)
diff.mean <- avg.steps.byday - avg.steps.nomis.byday
source('~/.active-rstudio-document', echo=TRUE)
diff.mean
?weekday
?weekdays
weekdays(as.date(Date))
weekdays(Date)
daytype <- weekdays(dt$date)
daytype <- weekdays(as.date(dt$date)
daytype <- weekdays(as.date(dt$date))
daytype <- weekdays(as.date(dt$date))
?as.date
daytype <- weekdays(as.Date(dt$date))
dt$daytype <- weekdays(as.Date(dt$date))
dt$daytype <- as.factor(weekdays(as.Date(dt$date)))
sum(daytype)
View(dt)
dt$daytype <- ifelse(dt$dow %in% c("sábado", "domingo"), "Weekend","Weekday")
source('~/.active-rstudio-document', echo=TRUE)
View(dt)
sum(dt$weekday)
sum(dt$daytype)
dt$daytype <- ifelse(dt$dow %in% c("sábado", "domingo"), "Weekend","Weekday")
dt.nomis <- transform(dt.nomis, day=factor(daytype))
dt.nomis$dow <- as.factor(weekdays(as.Date(dt$date)))
dt.nomis$daytype <- ifelse(dt$dow %in% c("sábado", "domingo"), "Weekend","Weekday")
dt.nomis <- transform(dt.nomis, day=factor(daytype))
dt.nomis.by_interval <-  aggregate(steps ~ interval + day, dt.nomis, mean)
View(dt.nomis.by_interval)
p4 <- ggplot(dt.nomis.by_interval, aes(x = interval, y = steps_avg)) #create plot
p4 +  geom_line() + #format histogram
labs(x = "Interval", y= "Average number of steps taken") +
facet_grid(. ~ daytype)
dt.nomis.by_interval <-  aggregate(steps_avg ~ interval + day, dt.nomis, mean)
p4 <- ggplot(dt.nomis.by_interval, aes(x = interval, y = steps_avg)) #create plot
p4 +  geom_line() + #format histogram
labs(x = "Interval", y= "Average number of steps taken") +
facet_grid(. ~ daytype)
dt.nomis <- transform(dt.nomis, day=factor(daytype))
#Use aggregate instead of dplyr functions
dt.nomis.by_interval <-  aggregate(steps_avg ~ interval + day, dt.nomis, mean)
p4 <- ggplot(dt.nomis.by_interval, aes(x = interval, y = steps_avg)) #create plot
p4 +  geom_line() + #format histogram
labs(x = "Interval", y= "Average number of steps taken") +
facet_grid(. ~ day)
dt.nomis.by_interval <-  aggregate(steps ~ interval + day, dt.nomis, mean)
p4 <- ggplot(dt.nomis.by_interval, aes(x = interval, y = steps)) #create plot
p4 +  geom_line() + #format histogram
labs(x = "Interval", y= "Average number of steps taken") +
facet_grid(. ~ day)
p4 +  geom_line(facet_wrap(. ~ day)) + #format histogram
labs(x = "Interval", y= "Average number of steps taken")
p4 +  geom_line(colour = day, facet_wrap(. ~ day)) + #format histogram
labs(x = "Interval", y= "Average number of steps taken")
p4 +  geom_line(colour = day) + #format histogram
labs(x = "Interval", y= "Average number of steps taken")
p4 +  geom_line() + #format histogram
labs(x = "Interval", y= "Average number of steps taken") +
facet_grid(. ~ day)
p4 +  geom_line(aes(colour = lipid)) + #format histogram
labs(x = "Interval", y= "Average number of steps taken")
p4 +  geom_line(aes(colour = day)) + #format histogram
labs(x = "Interval", y= "Average number of steps taken")
source('~/.active-rstudio-document', echo=TRUE)
dt.nomis <- transform(dt.nomis, day=factor(daytype))
dt.nomis$dow <- as.factor(weekdays(as.Date(dt$date))) #Obtain days of week
dt.nomis <- transform(dt.nomis, day=factor(daytype))
dt.nomis$daytype <- ifelse(dt$dow %in% c("sábado", "domingo"), "Weekend","Weekday")
dt.nomis$daytype <- ifelse(dt.nomis$dow %in% c("sábado", "domingo"), "Weekend","Weekday")
source('~/.active-rstudio-document', echo=TRUE)
face
